/* Select from gallery or capture photo */


public class ProfilePresenter implements Profile.Actions {

    public static final int REQUEST_CAPTURE_PHOTO = 1;
    public static final int REQUEST_SELECT_FROM_GALLERY = 2;
    public static final int REQUEST_EXTERNAL_STORAGE_PERMISSIONS = 3;

    public static final String[] EXTERNAL_STORAGE_PERMISSION_GROUP = new String[]{
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
    };

    private Activity mActivity;
    private File mPhotoFile;
    private Profile.View mView;
    private Uri mUri;

    public ProfilePresenter(Activity activity, Profile.View view) {
        mActivity = activity;
        mView = view;
    }

    public boolean hasPermission() {
        int result = ContextCompat.checkSelfPermission(mActivity,
                EXTERNAL_STORAGE_PERMISSION_GROUP[0]);
        return result == PackageManager.PERMISSION_GRANTED;
    }

    public void onPhotoSelected(Intent data) {
        mActivity.revokeUriPermission(data.getData(), Intent.FLAG_GRANT_WRITE_URI_PERMISSION);

        Bitmap bitMap = getBitmapFromURI(data.getData());
        mPhotoFile = saveBitmapIntoImage(bitMap, mPhotoFile);

        mView.updatePhotoView(mPhotoFile);
    }

    public void onPhotoCaptured() {
        mActivity.revokeUriPermission(mUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        mView.updatePhotoView(mPhotoFile);
    }

    public Intent selectFromGallery(String fileName) {

        mPhotoFile = getPhotoFile(fileName);
        mUri = FileProvider.getUriForFile(mActivity, mActivity.getPackageName(), mPhotoFile);

        Intent pickIntent = new Intent(Intent.ACTION_PICK);
        pickIntent.setType(Cons.IMAGE_TYPE);
        return pickIntent;
    }

    public boolean isPhotoAvailable(String fileName) {
        return getPhotoFile(fileName).exists();
    }

    public Intent captureImage(String fileName) {

        mPhotoFile = getPhotoFile(fileName);
        mUri = FileProvider.getUriForFile(mActivity, mActivity.getPackageName(), mPhotoFile);

        Intent captureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        captureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mUri);

        List<ResolveInfo> cameraActivities = mActivity
                .getPackageManager().queryIntentActivities(captureIntent,
                        PackageManager.MATCH_DEFAULT_ONLY);

        for (ResolveInfo activity : cameraActivities) {
            mActivity.grantUriPermission(activity.activityInfo.packageName, mUri,
                    Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
        }

        return captureIntent;
    }

    public void savePhoto(String savedPhotoName) {
        File savedPhoto = getPhotoFile(savedPhotoName);
        Bitmap bitMap = getBitmapFromURI(Uri.fromFile(mPhotoFile));
        saveBitmapIntoImage(bitMap, savedPhoto);
    }

    public File getPhotoFile(String fileName) {
        File filesDir = new File(mActivity.getFilesDir(), getUserName());
        if (!filesDir.exists()) {
            filesDir.mkdirs();
        }

        return new File(filesDir, fileName);
    }

    public String getUserName() {

        SharedPreferences pref = mActivity.getSharedPreferences(Cons.USER, Context.MODE_PRIVATE);

        if (pref == null) {
            return Cons.DEFAULT;
        }

        return pref.getString(Cons.USERNAME, Cons.DEFAULT);
    }

    public Bitmap getBitmapFromURI(Uri uri) {

        try {
            InputStream input = mActivity.getContentResolver().openInputStream(uri);
            if (input == null) {
                return null;
            }

            return modifyOrientation(BitmapFactory.decodeStream(input), uri.getEncodedPath());

        } catch (FileNotFoundException e) {
        }

        return null;
    }

    public File saveBitmapIntoImage(Bitmap finalBitmap, File photo) {

        try {
            FileOutputStream out = new FileOutputStream(photo);
            finalBitmap.compress(Bitmap.CompressFormat.JPEG, 90, out);
            out.flush();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return photo;
    }


    public static Bitmap modifyOrientation(Bitmap bitmap, String path) {

        try {
            ExifInterface ei = new ExifInterface(path);
            int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                    ExifInterface.ORIENTATION_NORMAL);

            switch (orientation) {
                case ExifInterface.ORIENTATION_ROTATE_90:
                    return rotate(bitmap, 90);
                default:
                    return bitmap;
            }
        } catch (Exception e) {
        }

        return bitmap;
    }

    public static Bitmap rotate(Bitmap bitmap, float degrees) {
        Matrix matrix = new Matrix();
        matrix.postRotate(degrees);
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(),
                matrix, true);
    }

    /* OnBack from Camera or Gallery */
    public void onBack(int requestCode, int resultCode, Intent data) {

        if (resultCode != Activity.RESULT_OK) {
            return;
        }

        switch (requestCode) {
            case REQUEST_CAPTURE_PHOTO:
                onPhotoCaptured();
                break;
            case REQUEST_SELECT_FROM_GALLERY:
                onPhotoSelected(data);
                break;
            case REQUEST_EXTERNAL_STORAGE_PERMISSIONS:
                Toast.makeText(mActivity, "PERMISSIONS", Toast.LENGTH_SHORT).show();
                break;
        }
    }
}
